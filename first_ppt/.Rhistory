submit()
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed<- mutate(passed, status = "passed")
failed<- mutate(failed, status = "failed")
rbind_list(passed, failed)
sat
submit()
submit()
33/36
deck
52
4/52
1*(3/51*)*(2/50)*(1/49)
1*(3/51)*(2/50)*(1/49)
0
12/52
2/51
0.18*2 -1.54 +0.42*3 +0.95
1.09/7
1.03/7
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
(sum(y*x))/sum(x^2)
library(datasets)
data(mtcars)
str(mtcars)
lm(mtcars$mpg ~ mtcars$wt)
1.5*0.4
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x)
sd(x)
(8.58-9.31)/0.7511
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
lm(y~x)
mean(x)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
summary(fit)
sqrt(1-0.4358)
0.223/0.7511325
sqrt(1-0.0.3552)
sqrt(1-0.3552)
0.223/0.8029944
predict(fit)
sum((y-predict(fit))^2)
0.348097/7
sqrt(0.04972814)
library(datasets)
fit1 <- lm(mtcars$mpg ~ mtcars$wt)
summary(fit1)
summary(mtcars)
str(mtcars)
sum((y-predict(fit1))^2)
sum((mtcars$mpg-predict(fit1))^2)
278.3219/30
sqrt(9.277397)
3.045882*sqrt(1+(1/32))
predict(fit1)
newdata <- data.frame(x=mtcars$wt)
predict(fit1, newdata, interval=("prediction"))
newdata <- data.frame(x=mean(mtcars$wt))
predict(fit1, newdata, interval=("prediction"))
predict(fit1, newdata, interval=("predict"))
predict(fit1, newdata, interval="predict")
newdata <- data.frame(mtcars$wt= mean(mtcars$wt))
newdata <- data.frame(mtcars$wt = 3.2)
x <- mtcars$wt
y <- mtcars$mpg
fit2 <- lm (y~x)
newdata = data.frame(x=3.2)
mean(mtcars$wt)
newdata = data.frame(x=3.21725)
predict(fit2, newdata, interval="predict")
newdata = data.frame(x=3)
predict(fit2, newdata, interval="predict")
summary(fit2)
fit4 lm(y~(x/2))
fit4 <- lm(y~(x/2))
fit4 <- lm(y~I(x/2))
summary(fit4)
anova(fit3)
anova(fit2)
library(datasets)
fit <- lm(mtcars$mpg ~ factor(mtcars$cyl)+mtcars$wt)
summary(fit)
mtcars
fit2 <- lm(mtcars$mpg ~ factor(mtcars$cyl)+mtcars$wt-1)
summary(fit2)
fit3 <- lm(mtcars$mpg ~ factor(mtcars$cyl))
summary(fit3)
fit4 <- lm(mtcars$mpg ~ factor(mtcars$cyl)+mtcars$wt+factor(mtcars$cyl)*mtcars$wt)
anova(fit,fit4)
?mtcars
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
q5 <- lm(y~x)
lm.influence(q5)
dfbetas(q5)
dfbetas(q5)[1:5,2]
rm(list=ls())
library(swirl)
swirl()
fit <- lm(child ~ parent, data=glaton)
fit <- lm(child ~ parent, data=galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, glaton$parent)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs - rhs
all.equal(lhs, rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est)
varEst <- var(est(fit))
?
>
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes+varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
rm(list=ls())
?mtcars
x <- mtcars[2:11]
y <- mtcars[1]
cor(x,y)
cor(mtcars, mtcars)
z <- c(mtcars[2:4],mtcars[6], mtcars[9])
cor(z,z)
z <- as.data.table(c(mtcars[2:4],mtcars[6], mtcars[9]))
z <- as.data.frame(c(mtcars[2:4],mtcars[6], mtcars[9]))
cor(z,z)
fit <- lm(mtcars$mpg ~ mtcars$am + mtcars$cyl + mtcars$am*mtcarscyl)
fit <- lm(mtcars$mpg ~ mtcars$am + mtcars$cyl + mtcars$am*mtcars$cyl)
summary(fit)
fit1 <- lm(mtcars$mpg ~ mtcars$am + mtcars$cyl + mtcars$wt)
summary(fit1)
fit2 <- lm(mtcars$mpg ~ mtcars$am)
summry(fit2)
summary(fit2)
fit3 <- lm(mtcars$mpg ~ mtcars$am +mtcars$wt + mtcars$am*mtcars$wt)
summary(fit3)
library(ggplot2)
ggplot(data=mtcars, aes(wt,mpg, colour=am))+geom_point()
ggplot(data=mtcars, aes(wt,mpg, colour=as.factor(am))+geom_point()
)
ggplot(data=mtcars, aes(wt,mpg, colour=as.factor(am))+geom_point()
)
ggplot(data=mtcars, aes(wt,mpg, colour=as.factor(am))+geom_point()
)
ggplot(data=mtcars, aes(wt,mpg, colour=as.factor(am)))+geom_point()
ggplot(data=mtcars, aes(wt,mpg, colour=as.factor(am)))+geom_point(size=4)
ggplot(data=mtcars, aes(wt,am, colour=wt))+geom_point(size=4)
ggplot(data=mtcars, aes(mpg,am, colour=wt))+geom_point(size=4)
ggplot(data=mtcars, aes(am,mpg, colour=wt))+geom_point(size=4)
ggplot(data=mtcars, aes(wt,mpg, colour=as.factor(am)))+geom_point(size=4)
sum(mtcars$am)
13/32
summary(mtcars$mpg)
plot(mtcars$mpg)
hist(mtcars$mpg)
hist(mtcars$mpg, bin=2)
hist(mtcars$mpg, breaks=10)
hist(mtcars$mpg, breaks=15)
hist(mtcars$mpg, breaks=25)
curve(dnorm(x, mean=mean(mtcars$mpg), sd=sd(mtcars$mpg)), add=TRUE, col="darkblue", lwd=2)
curve(dnorm(mean=mean(mtcars$mpg), sd=sd(mtcars$mpg)), add=TRUE, col="darkblue", lwd=2)
hist(mtcars$mpg, breaks=25, freq=F)
curve(dnorm(x, mean=mean(mtcars$mpg), sd=sd(mtcars$mpg)), add=TRUE, col="darkblue", lwd=2)
plot(mtcars$mpg, mtcars$am)
plot(mtcars$am, mtcars$mpg)
plot(as.factor(mtcars$am), mtcars$mpg)
par(mfrow=c(2,2))
plot(mtcars$cyl, mtcars$mpg, main="Scatterplot of cyl vs. mpg")
plot(mtcars$disp, mtcars$mpg, main="Scatterplot of disp vs. mpg")
plot(mtcars$hp, mtcars$mpg, main="Scatterplot of hp vs. mpg")
plot(mtcars$wt, mtcars$mpg, main="Scatterplot of wt vs. mpg")
confint(fit2, 'mtcars$am', level=0.95)
confint(fit3, level=0.95)
plot(fit2)
par(mfrow=(2,2))
par(mfrow=c(2,2))
plot(fit2)
plot(predict(fit2), resid(fit2))
plot(predict(fit3), resid(fit3))
par(mfrow=c(2,2))
plot(predict(fit3), resid(fit3))
par(mfrow=c(2,2))
plot(predict(fit3), resid(fit3))
par(mfrow=c(3,3))
plot(predict(fit3), resid(fit3))
plot(predict(fit2), resid(fit2))
plot(predict(fit2), resid(fit2))
plot(fit3)
par(mfrow=c(2,2))
plot(fit3)
anova(fit2, fit3)
anova(fit2)
ggplot(data=mtcars, aes(as.factor(am), mpg))+geom_point()
ggplot(data=mtcars, aes(as.factor(am), mpg))+geom_point(aes(color="blue"))
ggplot(data=mtcars, aes(as.factor(am), mpg))+geom_point(aes(color=2))
ggplot(data=mtcars, aes(as.factor(am), mpg))+geom_point(color="red")
ggplot(data=mtcars, aes(as.factor(am), mpg))+geom_point(color="red", size=2)
ggplot(data=mtcars, aes(as.factor(am), mpg))+geom_point(color="red", size=3)
par(mfrow=c(2,2))
ggplot(data=mtcars, aes(as.factor(cyl), mpg))+geom_point(color="red", size=3)
par(mfrow=c(2,2))
rm(list=ls())
library(mass)
library(MASS)
?shuttle
q1 <- shuttle
View(`q1`)
class(q1$use)
q1$use <- factor(q1$use, levels=c("noauto","auto"), labels=c(0,1))
q1$wind <- factor(q1$wind, levels=c("tail","head"), labels=c(0,1))
fit <- glm(use ~ wind, data=q1, family="binomial")
summary(fit)
exp^(-0.03181)
e^(-0.03181)
exp(-0.03181)
fit1 <- glm(use ~ wind+magn, data=q1, family="binomial")
summary(fit1)
exp(-3.201e-02)
?InsectSprays
q4 <- InsectSprays
View(`q4`)
fit1 <- glm(count ~ spray - 1, data=q4, family="poisson")
summary(fit1)
2.67415/2.73003
2.67415-2.73003
exp(-0.05588)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
x0 <- (x>0)*(x-0)
x0
fit3 <- lm (y ~ x+x0)
summary(fit2)
summary(fit3)
fit3 <- lm (y ~ 0+x+x0)
summary(fit3)
xmat <cbind(0,x,x0)
xmat <- cbind(0,x,x0)
fit4 <- lm(y ~ cmat - 1)
fit4 <- lm(y ~ xmat - 1)
summary(fit4)
yhat <-predict(fit3)
lines(x, yhat, col="red")
x
x0
y
yhat2 <- predict(lm(y ~ x +x0))
lines(x, yhat2, col="green")
yhat
fit5 <- glm(I(1-use) ~ wind, data=q1, family="binomial")
fit5 <- glm(1-use ~ wind, data=q1, family="binomial")
q1$use <- factor(q1$use, levels=c("noauto","auto"), labels=c(1,0))
fit <- glm(use ~ wind, data=q1, family="binomial")
fit <- glm(use ~ wind, data=q1, family="binomial")
q1$use <- factor(q1$use, levels=c("noauto","auto"), labels=c(1,0))
glm(use ~ wind, data=q1, family="binomial")
shuttle$use <- factor(shuttle$use, levels=c("noauto","auto"), labels=c(0,1))
shuttle$wind <- factor(shuttle$wind, levels=c("tail","head"), labels=c(0,1))
shuttle$use <- factor(shuttle$use, levels=c("noauto","auto"), labels=c(1,0))
glm(use ~ wind, data=shuttle, family="binomial")
shuttle$use
q1$use
rm(list=ls())
q1 <- shuttle
q1$use
q1$use <- factor(q1$use, levels=c("auto", "noauto"))
q1$use
q1$use <- factor(q1$use, levels=c("auto", "noauto"), labels=c(0,1))
q1$use
q1$wind <- factor(q1$wind, levels=c("tail", "head"), labels=c(0,1))
q1$wind
fit <- (use ~ wind, data=q1, family="binomial")
fit <- (use ~ wind , data=q1, family="binomial")
fit <- glm(use ~ wind , data=q1, family="binomial")
summary(fit)
shuttle$use <- factor(shuttle$use, levels=c("noauto","auto"), labels=c(0,1))
shuttle$wind <- factor(shuttle$wind, levels=c("tail","head"), labels=c(0,1))
fit2 <- glm(use ~ wind , data=shuttle, family="binomial")
summary(fit2)
q5 <- InsectSprays
t <- 1:72
length(t)
x <- sample(c(0,1), replace=TRUE, size= 72)
x <- factor(x)
x
glm(q5$count ~ x + offset(t), family = poisson)
t2 <- log(10) + t
glm(count ~ x + offset(t2), family = poisson)
glm(q5$count ~ x + offset(t2), family = poisson)
install.packages(c("BH", "colorspace", "digest", "dplyr", "evaluate", "formatR", "Formula", "ggplot2", "gtools", "highr", "Hmisc", "httr", "jsonlite", "KernSmooth", "knitr", "lattice", "lavaan", "lazyeval", "manipulate", "markdown", "mime", "mnormt", "plotrix", "plyr", "psych", "quantmod", "quantreg", "R.methodsS3", "R.oo", "R.utils", "Rcpp", "RCurl", "rgl", "rmarkdown", "SparseM", "stringr", "swirl", "testthat", "UsingR", "zoo"))
library(caret)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
rm(c(x,y,z))
rm(c("x","y","z"))
rm(x)
rm(y)
rm(z)
rm(fit)
rm(fit1)
rm(fit2)
rm(fit3)
str(vowel.train)
View(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
str(vowel.train)
str(vowel.test)
rf_fit <- train(y~., data=vowel.train, method="rf")
gbm_fit <- train(y~., data=vowel.train, method="gbm")
rf_pre <- predict(rf_fit, vowel.test)
gbm_pre <- predict(gbm_fit, vowel.test)
confusionMatrix((rf_pre, vowel.test$y))
confusionMatrix(rf_pre, vowel.test$y)
confusionMatrix(gbm_pre, vowel.test$y)
con_id <- (rf_pre == gbm_pre)
confusionMatrix(gbm_pre[con_id], vowel.test$y[con_id])
rm(list=ls())
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rfmodel <- suppressMessages(train(diagnosis~., data=training, method="rf"))
gbmmodel <- suppressMessages(train(diagnosis~., data=training, method="gbm"))
ldamodel <- suppressMessages(train(diagnosis~., data=training, method="lda"))
predict1 <- predict(rfmodel, newdata = testing)
predict2 <- predict(gbmmodel, newdata = testing)
predict3 <- predict(ldamodel, newdata = testing)
DF_combined <- data.frame(predict1, predict2, predict3, diagnosis = training$diagnosis)
predict1 <- predict(rfmodel, newdata = training)
predict2 <- predict(gbmmodel, newdata = training)
predict3 <- predict(ldamodel, newdata = training)
DF_combined <- data.frame(predict1, predict2, predict3, diagnosis = training$diagnosis)
fit_combined <- train(diagnosis ~ ., data = DF_combined, method = "rf")
predict4 <- predict(fit_combined, newdata = testing)
c4 <- confusionMatrix(predict4, testing$diagnosis)
rm(list=ls())
set.seed(3433);
library(AppliedPredictiveModeling);
data(AlzheimerDisease);
adData = data.frame(diagnosis,predictors);
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]];
training = adData[ inTrain,];
testing = adData[-inTrain,];
set.seed(62433)
rf_model <- train(diagnosis ~ . , data=training, method="rf")
gbm_model <- train(diagnosis ~ . , data=training, method="gbm")
lda_model <- train(diagnosis ~ . , data=training, method="lda")
predict1 <- predict(rf_model, newdata = training)
predict2 <- predict(gbm_model, newdata = training)
predict3 <- predict(lda_model, newdata = training)
DF_combined <- data.frame(predict1, predict2, predict3, diagnosis = training$diagnosis)
View(DF_combined)
combined_model <- train(diagnosis ~ . , data=DF_combined, method="rf")
predict1_new <- predict(rf_model, newdata = testing)
predict2_new <- predict(gbm_model, newdata = testing)
predict3_new <- predict(lda_model, newdata = testing)
confusionMatrix(predict1_new, testing$diagnosis)
confusionMatrix(predict2_new, testing$diagnosis)
confusionMatrix(predict3_new, testing$diagnosis)
new_df <- data.frame(predict1_new,predict2_new, predict3_new, testing$diagnosis)
stack_pred <- predict(combined_model,new_df)
rm(list=ls)
rm(list=ls())
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
M1 <- train(diagnosis ~ ., data=training, method="rf")
M2 <- train(diagnosis ~ ., data=training, method="gbm")
M3 <- train(diagnosis ~ ., data=training, method="lda")
hat1 <- predict(M1, testing)
hat2 <- predict(M2, testing)
hat3 <- predict(M3, testing)
hat <- data.frame(hat1, hat2, hat3, diagnosis=testing$diagnosis)
M4 <- train(diagnosis ~ ., data=hat, method="rf")
M4
hat4 <- predict(M4, testing)
confusionMatrix(hat1, testing$diagnosis)$overall
confusionMatrix(hat2, testing$diagnosis)$overall
confusionMatrix(hat3, testing$diagnosis)$overall
confusionMatrix(hat4, testing$diagnosis)$overall
rm(list=ls())
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
M1 <- train(CompressiveStrength ~ ., data=training, method="lasso")
M1 <- train(CompressiveStrength ~ ., data=training, method="lasso")
M1
plot(M1$finalModel, xvar="penalty")
rm(list=ls())
library(lubridate)  # For year() function below
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv"
dat = read.csv(url)
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate)
library(Lubridate)
install.packages("lubridate")
library(lubridate)  # For year() function below
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv"
dat = read.csv(url)
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("forecast")
M <- bats(tstrain)
M
hat <- forecast(M, length(testing$visitsTumblr))
hat <- cbind(testing, data.frame(hat))
hat$isIn95 <- hat$Lo.95 < hat$visitsTumblr & hat$visitsTumblr < hat$Hi.95
prop.table(table(hat$isIn95))
library(forecast)
M <- bats(tstrain)
M
hat <- forecast(M, length(testing$visitsTumblr))
hat <- cbind(testing, data.frame(hat))
hat$isIn95 <- hat$Lo.95 < hat$visitsTumblr & hat$visitsTumblr < hat$Hi.95
prop.table(table(hat$isIn95))
install.packages("e1071")
library(e1071)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(caret)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
M <- svm(CompressiveStrength ~ ., data=training)
testing$hat <- predict(M, testing)
testing$error <- testing$CompressiveStrength - testing$hat
rmse <- sqrt(mean(testing$error ^ 2))
RMSE(testing$hat,testing$CompressiveStrength)
rm(list=ls())
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
myPlot(10)
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("rCharts")
library(rCharts)
install.packages("shiney")
install.packages("shiney")
install.packages("shiny")
install.packages("devtools")
install_github("ramnathv/rCharts")
library(devtools)
install_github("ramnathv/rCharts")
rm(list=ls())
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
setwd("C:/Users/Iso/Desktop/Coursera/DataProducts")
author('first_ppt')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
install_version("stringr", version="0.6.2")
install_version("stringr", version="0.6.2")
install.packages('stringr')
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
devtools::install_github('muschellij2/slidify')
install_github('ramnathv/slidify', ref = github_pull(425))
library(devtools)
install_github('ramnathv/slidify', ref = github_pull(425))
